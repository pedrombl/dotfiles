" vi:syntax=vim
let s:pluginDir = $HOME . '/.vim/plugged'

call plug#begin(s:pluginDir)

Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'kien/ctrlp.vim'
Plug 'JazzCore/ctrlp-cmatcher', {
  \ 'do': 'export CFLAGS=-Qunused-arguments && export CPPFLAGS=-Qunused-arguments && ./install.sh'
  \ }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mileszs/ack.vim'
Plug 'jpalardy/vim-slime'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'SyntaxRange'
Plug 'Lokaltog/vim-easymotion'
Plug 'mhinz/vim-startify'
Plug 'vim-scripts/BufOnly.vim'
Plug 'benmills/vimux'
Plug 'tpope/vim-dispatch'
Plug 'godlygeek/tabular'
Plug 'vim-scripts/LanguageTool'

" for ruby
Plug 'vim-scripts/matchit.zip'
Plug 'ecomba/vim-ruby-refactoring', { 'for': 'ruby' }
Plug 'janko-m/vim-test'
Plug 'tpope/vim-cucumber', {'for': 'cucumber' }

" for python
Plug 'pedrombl/vim-autopep8', { 'for': 'python' }

" for vim-snipmate
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

" Languages
Plug 'elixir-lang/vim-elixir', {'for': 'exilir' }
Plug 'claco/jasmine.vim', {'for': 'javascript' }
Plug 'guns/vim-clojure-static', {'for': 'clojure' }
Plug 'tfnico/vim-gradle', { 'for': 'gradle' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'slim-template/vim-slim', { 'for': 'slim' }
Plug 'leafgarland/typescript-vim'

" Gist
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'


call plug#end()

if !isdirectory(s:pluginDir)
  autocmd VimEnter * PlugInstall
              \| source $MYVIMRC
endif

"Plugins configurations

" Easy Motion
map <Leader>j <Plug>(easymotion-prefix)

" Run tests
nmap <silent> <leader>rT :TestNearest<CR>
nmap <silent> <leader>rt :TestFile<CR>
nmap <silent> <leader>ra :TestSuite<CR>
nmap <silent> <leader>rl :TestLast<CR>

" make test commands execute using vimux
" 'dispatch'
let test#strategy = 'vimux' 
let test#python#pytest#options = '--doctest-modules'
" let test#ruby#use_binstubs = 0

" Use different syntax check styles
let g:syntastic_javascript_checkers=['jshint']
let g:syntastic_python_checkers=['flake8']

nmap <silent> <leader>rr :Dispatch ./bin/cop<CR>

" Disable fugitive in airline status bar
let g:airline#extensions#branch#enabled = 0

" Map ctrlp for buffers
nmap <c-B> :CtrlPBuffer<cr>

" Configure AG to be use for ctrlp and Ack
if executable('ag')
  " Use ag over grep
  let g:ackprg = 'ag --vimgrep'

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Change ctrl p matcher
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }

let g:autopep8_disable_key_mapping=0

let g:languagetool_jar='/Users/pedroleal/Library/LanguageTool-4.0/languagetool-commandline.jar'

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1


let g:slime_target = "tmux"
